import { useState, useEffect } from "react";
import axios from "axios";

const SetPassword = () => {
  const [users, setUsers] = useState([]);
  const [passwords, setPasswords] = useState({}); // m·∫≠t kh·∫©u ƒëang nh·∫≠p
  const [grantedPasswords, setGrantedPasswords] = useState({}); // m·∫≠t kh·∫©u ƒë√£ c·∫•p
  const [message, setMessage] = useState("");

  const token = localStorage.getItem("token");

  useEffect(() => {
    if (token) {
      fetchUsers();
    } else {
      setMessage("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p admin tr∆∞·ªõc khi c·∫•p m·∫≠t kh·∫©u!");
    }
  }, []);

  // üß© L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  const fetchUsers = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/auth/users", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(res.data);
    } catch (err) {
      console.error("L·ªói khi t·∫£i danh s√°ch:", err);
      setMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n (ch∆∞a ƒëƒÉng nh·∫≠p admin?)");
    }
  };

  // üß© C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒëang nh·∫≠p
  const handlePasswordChange = (userId, value) => {
    setPasswords({ ...passwords, [userId]: value });
  };

  // üß© Validate ƒë·ªô d√†i m·∫≠t kh·∫©u
  const validatePassword = (password) => {
    if (password.length < 6) return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!";
    if (!/[A-Z]/.test(password)) return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ in hoa!";
    if (!/[0-9]/.test(password)) return "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë!";
    return null;
  };

  // üß© C·∫•p ho·∫∑c ƒë·ªïi m·∫≠t kh·∫©u
  const handleSetPassword = async (userId) => {
    const password = passwords[userId];
    if (!password) {
      setMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!");
      return;
    }

    const validationError = validatePassword(password);
    if (validationError) {
      setMessage(`‚ùå ${validationError}`);
      return;
    }

    try {
      const res = await axios.put(
        `http://localhost:5000/api/auth/setpassword/${userId}`,
        { password },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setMessage(res.data.message || "‚úÖ C·∫•p m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setGrantedPasswords({
        ...grantedPasswords,
        [userId]: password,
      });
      setPasswords({ ...passwords, [userId]: "" });
    } catch (err) {
      console.error("L·ªói khi c·∫•p m·∫≠t kh·∫©u:", err);
      setMessage("‚ùå L·ªói khi c·∫•p m·∫≠t kh·∫©u!");
    }
  };

  return (
    <div className="bg-white shadow-lg rounded-lg p-6">
      <h2 className="text-2xl font-bold mb-6 text-green-700 text-center">
        C·∫•p m·∫≠t kh·∫©u cho sinh vi√™n
      </h2>

      {message && (
        <p className="mb-4 text-center text-sm text-gray-700">{message}</p>
      )}

      <table className="min-w-full border border-gray-300 rounded-lg">
        <thead>
          <tr className="bg-green-100 text-left">
            <th className="px-4 py-2 border">M√£ sinh vi√™n</th>
            <th className="px-4 py-2 border">Email</th>
            <th className="px-4 py-2 border">M·∫≠t kh·∫©u</th>
            <th className="px-4 py-2 border text-center">Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {users.length > 0 ? (
            users.map((u) => {
              const granted = grantedPasswords[u._id];
              return (
                <tr key={u._id} className="hover:bg-gray-50">
                  <td className="px-4 py-2 border">{u.studentCode}</td>
                  <td className="px-4 py-2 border">{u.email}</td>
                  <td className="px-4 py-2 border">
                    {granted ? (
                      <span className="text-green-600 font-semibold">
                        {granted}
                      </span>
                    ) : (
                      <input
                        type="text"
                        value={passwords[u._id] || ""}
                        onChange={(e) =>
                          handlePasswordChange(u._id, e.target.value)
                        }
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u..."
                        className="border rounded px-2 py-1 w-full"
                      />
                    )}
                  </td>
                  <td className="px-4 py-2 border text-center">
                    <button
                      onClick={() => handleSetPassword(u._id)}
                      className={`${
                        granted
                          ? "bg-blue-600 hover:bg-blue-700"
                          : "bg-green-600 hover:bg-green-700"
                      } text-white px-3 py-1 rounded transition`}
                    >
                      {granted ? "ƒê·ªïi m·∫≠t kh·∫©u" : "C·∫•p m·∫≠t kh·∫©u"}
                    </button>
                  </td>
                </tr>
              );
            })
          ) : (
            <tr>
              <td
                colSpan="4"
                className="text-center py-4 text-gray-500 italic"
              >
                Kh√¥ng c√≥ sinh vi√™n n√†o.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default SetPassword;
