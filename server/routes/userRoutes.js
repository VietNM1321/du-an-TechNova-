import express from "express";
import User from "../models/User.js";
import Borrowings from "../models/borrowings.js";

const router = express.Router();

/* ============================================================
   üü¢ L·∫§Y DANH S√ÅCH NG∆Ø·ªúI D√ôNG
   ============================================================ */
router.get("/", async (req, res) => {
  try {
    const users = await User.find()
      .select("studentCode name email active role createdAt")
      .sort({ createdAt: -1 });

    res.status(200).json({
      success: true,
      message: "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng",
      users,
    });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
});

/* ============================================================
   üîí KH√ìA / M·ªû KH√ìA T√ÄI KHO·∫¢N
   ============================================================ */
router.put("/:id/toggle-active", async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user)
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    user.active = !user.active;
    await user.save();

    res.status(200).json({
      success: true,
      message: `T√†i kho·∫£n ƒë√£ ${user.active ? "m·ªü kh√≥a" : "b·ªã kh√≥a"}`,
      user,
    });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
});

/* ============================================================
   üßæ L·∫§Y H·ªí S∆† NG∆Ø·ªúI D√ôNG + DANH S√ÅCH S√ÅCH ƒê√É M∆Ø·ª¢N
   ============================================================ */
router.get("/:userId/profile", async (req, res) => {
  try {
    const user = await User.findById(req.params.userId).select("studentCode email role");
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

    const borrowings = await Borrowings.find({ user: user._id })
      .populate("book", "title author")
      .sort({ borrowDate: -1 });

    res.json({ user, borrowings });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

/* ============================================================
   üìò G·ª¨I B√ÅO C√ÅO M·∫§T / H·ªéNG
   ============================================================ */
router.post("/:borrowingId/report", async (req, res) => {
  try {
    const { type, reason } = req.body;

    const borrowing = await Borrowings.findById(req.params.borrowingId);
    if (!borrowing)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi m∆∞·ª£n!" });

    borrowing.status = type === "lost" ? "lost" : "damaged";
    borrowing.reportReason = reason;
    borrowing.returnDate = new Date();

    await borrowing.save();
    res.json({ message: "ƒê√£ g·ª≠i b√°o c√°o th√†nh c√¥ng!", borrowing });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

export default router;