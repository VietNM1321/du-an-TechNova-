import express from "express";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import User from "../models/User.js";

const router = express.Router();

// üß© Middleware x√°c th·ª±c token
const verifyToken = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "secret");
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
  }
};

// üß© Middleware ki·ªÉm tra quy·ªÅn admin
const verifyAdmin = (req, res, next) => {
  if (req.user.role !== "admin")
    return res.status(403).json({ message: "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p!" });
  next();
};

//
// ==================== C√ÅC API ====================
//

// üìã 1Ô∏è‚É£ L·∫•y danh s√°ch sinh vi√™n
router.get("/", verifyToken, verifyAdmin, async (req, res) => {
  try {
    const students = await User.find({ role: "student" }).select("-password");
    res.status(200).json(students);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// üîí 2Ô∏è‚É£ Kh√≥a / M·ªü kh√≥a t√†i kho·∫£n sinh vi√™n
router.put("/toggle/:id", verifyToken, verifyAdmin, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y sinh vi√™n" });

    user.active = !user.active;
    await user.save();

    res.status(200).json({
      message: user.active
        ? "‚úÖ ƒê√£ m·ªü kh√≥a t√†i kho·∫£n sinh vi√™n"
        : "üîí ƒê√£ kh√≥a t√†i kho·∫£n sinh vi√™n",
      user,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// üîë 3Ô∏è‚É£ Admin c·∫•p m·∫≠t kh·∫©u cho sinh vi√™n
router.put("/set-password/:id", verifyToken, verifyAdmin, async (req, res) => {
  try {
    const { password } = req.body;
    if (!password) return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" });

    const hashed = await bcrypt.hash(password, 10);

    const updated = await User.findByIdAndUpdate(
      req.params.id,
      { password: hashed },
      { new: true }
    ).select("-password");

    if (!updated)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y sinh vi√™n" });

    res.status(200).json({
      message: "‚úÖ C·∫•p m·∫≠t kh·∫©u th√†nh c√¥ng!",
      user: updated,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

export default router;
